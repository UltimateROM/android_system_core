From a891c1010dee65e56f51fd07780bd001997ff729 Mon Sep 17 00:00:00 2001
From: Shilin Victor <chrono.monochrome@gmail.com>
Date: Thu, 4 May 2017 10:26:24 +0300
Subject: [PATCH 02/26] STE system/core fix

Change-Id: Ie7655260d6d0f8e9cc92be558ef493d0f2bac732
---
 libutils/Android.bp                  |  4 ++--
 libutils/include/utils/Flattenable.h | 26 ++++++++++++++++++++++++++
 2 files changed, 28 insertions(+), 2 deletions(-)

diff --git a/libutils/Android.bp b/libutils/Android.bp
index 5e76279..c4d88c8 100644
--- a/libutils/Android.bp
+++ b/libutils/Android.bp
@@ -62,9 +62,10 @@ cc_library {
         "Unicode.cpp",
         "VectorImpl.cpp",
         "misc.cpp",
+        "Flattenable.cpp",
     ],
 
-    cflags: ["-Werror"],
+    cflags: ["-DSTE_HARDWARE", "-DSTE_SAMSUNG_HARDWARE"],
     include_dirs: ["external/safe-iop/include"],
     header_libs: [
         "libutils_headers",
@@ -96,7 +97,6 @@ cc_library {
                 "liblog",
                 "libvndksupport",
             ],
-
             sanitize: {
                 misc_undefined: ["integer"],
             },
diff --git a/libutils/include/utils/Flattenable.h b/libutils/include/utils/Flattenable.h
index 070c710..058ba6f 100644
--- a/libutils/include/utils/Flattenable.h
+++ b/libutils/include/utils/Flattenable.h
@@ -63,19 +63,23 @@ public:
     // write a POD structure
     template<typename T>
     static void write(void*& buffer, size_t& size, const T& value) {
+/*
         static_assert(std::is_trivially_copyable<T>::value,
                       "Cannot flatten a non-trivially-copyable type");
         memcpy(buffer, &value, sizeof(T));
         advance(buffer, size, sizeof(T));
+*/
     }
 
     // read a POD structure
     template<typename T>
     static void read(void const*& buffer, size_t& size, T& value) {
+/*
         static_assert(std::is_trivially_copyable<T>::value,
                       "Cannot unflatten a non-trivially-copyable type");
         memcpy(&value, buffer, sizeof(T));
         advance(buffer, size, sizeof(T));
+*/
     }
 };
 
@@ -86,21 +90,35 @@ public:
  * Flattenable objects must implement this protocol.
  */
 
+#ifndef STE_HARDWARE
 template <typename T>
+#endif
 class Flattenable {
 public:
     // size in bytes of the flattened object
+#ifdef STE_HARDWARE
+    virtual size_t getFlattenedSize() const = 0;
+#else
     inline size_t getFlattenedSize() const;
+#endif
 
     // number of file descriptors to flatten
+#ifdef STE_HARDWARE
+    virtual size_t getFdCount() const = 0;
+#else
     inline size_t getFdCount() const;
+#endif
 
     // flattens the object into buffer.
     // size should be at least of getFlattenedSize()
     // file descriptors are written in the fds[] array but ownership is
     // not transfered (ie: they must be dupped by the caller of
     // flatten() if needed).
+#ifdef STE_HARDWARE
+    virtual status_t flatten(void*& buffer, size_t& size, int*& fds, size_t& count) const = 0;
+#else
     inline status_t flatten(void*& buffer, size_t& size, int*& fds, size_t& count) const;
+#endif
 
     // unflattens the object from buffer.
     // size should be equal to the value of getFlattenedSize() when the
@@ -109,6 +127,13 @@ public:
     // don't need to be dupped(). ie: the caller of unflatten doesn't
     // keep ownership. If a fd is not retained by unflatten() it must be
     // explicitly closed.
+#ifdef STE_HARDWARE
+    virtual status_t unflatten(void const*& buffer, size_t& size, int const*& fds, size_t& count) = 0;
+
+protected:
+    virtual ~Flattenable() = 0;
+};
+#else
     inline status_t unflatten(void const*& buffer, size_t& size, int const*& fds, size_t& count);
 };
 
@@ -130,6 +155,7 @@ inline status_t Flattenable<T>::unflatten(
         void const*& buffer, size_t& size, int const*& fds, size_t& count) {
     return static_cast<T*>(this)->T::unflatten(buffer, size, fds, count);
 }
+#endif
 
 /*
  * LightFlattenable is a protocol allowing object to serialize themselves out
-- 
2.7.4

