From e9cf51f604afa55049a3b33be4ffcebd20c0911f Mon Sep 17 00:00:00 2001
From: Shilin Victor <chrono.monochrome@gmail.com>
Date: Sat, 16 Sep 2017 20:04:02 +0300
Subject: [PATCH 16/26] Revert "init: allow selinux to be disabled"

This reverts commit 656d38b15675655062f5e8f63699b5510bb69947.

Change-Id: I90f74211a58fa8817e7aa4ecf9c37e1edba82046
---
 adb/daemon/main.cpp       |   7 +--
 init/Android.mk           |   9 +++-
 init/devices.cpp          |  33 ++++++++-----
 init/init.cpp             | 118 +++++++++++++++++++---------------------------
 init/log.cpp              |  23 ++++-----
 init/property_service.cpp |  12 ++---
 init/service.cpp          |  76 +++++++++++++----------------
 init/util.cpp             |   9 ++--
 8 files changed, 137 insertions(+), 150 deletions(-)

diff --git a/adb/daemon/main.cpp b/adb/daemon/main.cpp
index ee536a3..7da82ad 100644
--- a/adb/daemon/main.cpp
+++ b/adb/daemon/main.cpp
@@ -127,9 +127,10 @@ static void drop_privileges(int server_port) {
     } else {
         // minijail_enter() will abort if any priv-dropping step fails.
         minijail_enter(jail.get());
-        if ((root_seclabel != nullptr) && (is_selinux_enabled() > 0)) {
-            if (setcon(root_seclabel) < 0) {
-                LOG(FATAL) << "Could not set selinux context";
+
+        if (root_seclabel != nullptr) {
+            if (selinux_android_setcon(root_seclabel) < 0) {
+                LOG(FATAL) << "Could not set SELinux context";
             }
         }
         std::string error;
diff --git a/init/Android.mk b/init/Android.mk
index 0e3b563..e6cf548 100644
--- a/init/Android.mk
+++ b/init/Android.mk
@@ -4,12 +4,19 @@ LOCAL_PATH:= $(call my-dir)
 
 # --
 
+ifneq (,$(filter userdebug eng,$(TARGET_BUILD_VARIANT)))
 init_options += \
     -DALLOW_LOCAL_PROP_OVERRIDE=1 \
     -DALLOW_PERMISSIVE_SELINUX=1 \
-    -DALLOW_DISABLE_SELINUX=1 \
     -DREBOOT_BOOTLOADER_ON_PANIC=1 \
     -DDUMP_ON_UMOUNT_FAILURE=1
+else
+init_options += \
+    -DALLOW_LOCAL_PROP_OVERRIDE=0 \
+    -DALLOW_PERMISSIVE_SELINUX=0 \
+    -DREBOOT_BOOTLOADER_ON_PANIC=0 \
+    -DDUMP_ON_UMOUNT_FAILURE=0
+endif
 
 ifneq (,$(filter eng,$(TARGET_BUILD_VARIANT)))
 init_options += \
diff --git a/init/devices.cpp b/init/devices.cpp
index 47f055c..b8f09f3 100644
--- a/init/devices.cpp
+++ b/init/devices.cpp
@@ -176,11 +176,9 @@ static void fixup_sys_perms(const char* upath, const char* subsystem) {
         chmod(attr_file.c_str(), dp->perm);
     }
 
-    if (is_selinux_enabled()) {
-       if (access(path.c_str(), F_OK) == 0) {
-          LOG(VERBOSE) << "restorecon_recursive: " << path;
-          restorecon(path.c_str(), SELINUX_ANDROID_RESTORECON_RECURSE);
-       }
+    if (access(path.c_str(), F_OK) == 0) {
+        LOG(VERBOSE) << "restorecon_recursive: " << path;
+        restorecon(path.c_str(), SELINUX_ANDROID_RESTORECON_RECURSE);
     }
 }
 
@@ -257,8 +255,24 @@ static void make_device(const char *path,
         PLOG(ERROR) << "setegid(" << gid << ") for " << path << " device failed";
         goto out;
     }
+    /* If the node already exists update its SELinux label to handle cases when
+     * it was created with the wrong context during coldboot procedure. */
+    if (mknod(path, mode, dev) && (errno == EEXIST) && secontext) {
+
+        char* fcon = nullptr;
+        int rc = lgetfilecon(path, &fcon);
+        if (rc < 0) {
+            PLOG(ERROR) << "Cannot get SELinux label on '" << path << "' device";
+            goto out;
+        }
+
+        bool different = strcmp(fcon, secontext) != 0;
+        freecon(fcon);
 
-    mknod(path, mode, dev);
+        if (different && lsetfilecon(path, secontext)) {
+            PLOG(ERROR) << "Cannot set '" << secontext << "' SELinux label on '" << path << "' device";
+        }
+    }
 
 out:
     chown(path, uid, -1);
@@ -934,7 +948,7 @@ coldboot_action_t handle_device_fd(coldboot_callback fn)
 {
     coldboot_action_t ret = handle_device_fd_with(
         [&](uevent* uevent) -> coldboot_action_t {
-            if (sehandle && selinux_status_updated() > 0) {
+            if (selinux_status_updated() > 0) {
                 struct selabel_handle *sehandle2;
                 sehandle2 = selinux_android_file_context_handle();
                 if (sehandle2) {
@@ -1020,12 +1034,9 @@ static coldboot_action_t coldboot(const char *path, coldboot_callback fn)
 }
 
 void device_init(const char* path, coldboot_callback fn) {
-    sehandle = NULL;
-    if (is_selinux_enabled() > 0) {
+    if (!sehandle) {
         sehandle = selinux_android_file_context_handle();
-        selinux_status_open(true);
     }
-
     // open uevent socket and selinux status only if it hasn't been
     // done before
     if (device_fd == -1) {
diff --git a/init/init.cpp b/init/init.cpp
index 972a544..60bd8d8 100644
--- a/init/init.cpp
+++ b/init/init.cpp
@@ -538,43 +538,26 @@ static void selinux_init_all_handles(void)
     sehandle_prop = selinux_android_prop_context_handle();
 }
 
-enum selinux_enforcing_status { SELINUX_DISABLED, SELINUX_PERMISSIVE, SELINUX_ENFORCING };
+enum selinux_enforcing_status { SELINUX_PERMISSIVE, SELINUX_ENFORCING };
 
-#if 0
 static selinux_enforcing_status selinux_status_from_cmdline() {
     selinux_enforcing_status status = SELINUX_ENFORCING;
 
-    std::function<void(char*,bool)> fn = [&](char* name, bool in_qemu) {
-        char *value = strchr(name, '=');
-        if (value == nullptr) { return; }
-        *value++ = '\0';
-        if (strcmp(name, "androidboot.selinux") == 0) {
-            if (strcmp(value, "disabled") == 0) {
-                status = SELINUX_DISABLED;
-            } else if (strcmp(value, "permissive") == 0) {
-                status = SELINUX_PERMISSIVE;
-            }
-         }
-     });
+    import_kernel_cmdline(false, [&](const std::string& key, const std::string& value, bool in_qemu) {
+        if (key == "androidboot.selinux" && value == "permissive") {
+            status = SELINUX_PERMISSIVE;
+        }
+    });
 
-     return status;
- }
-#endif
+    return status;
+}
 
-static bool selinux_is_disabled(void)
+static bool selinux_is_enforcing(void)
 {
-     return true;
-#if 0
-    if (ALLOW_DISABLE_SELINUX) {
-        if (access("/sys/fs/selinux", F_OK) != 0) {
-            // SELinux is not compiled into the kernel, or has been disabled
-            // via the kernel command line "selinux=0".
-            return true;
-        }
-        return true /*selinux_status_from_cmdline() == SELINUX_DISABLED */;
+    if (ALLOW_PERMISSIVE_SELINUX) {
+        return selinux_status_from_cmdline() == SELINUX_ENFORCING;
     }
-    return false;
-#endif
+    return true;
 }
 
 static int audit_callback(void *data, security_class_t /*cls*/, char *buf, size_t len) {
@@ -865,18 +848,20 @@ static void selinux_initialize(bool in_kernel_domain) {
     cb.func_audit = audit_callback;
     selinux_set_callback(SELINUX_CB_AUDIT, cb);
 
-    if (selinux_is_disabled()) {
-        return;
-    }
-
     if (in_kernel_domain) {
         LOG(INFO) << "Loading SELinux policy";
         if (!selinux_load_policy()) {
             panic();
         }
 
-        bool is_enforcing = false;
-        security_setenforce(is_enforcing);
+        bool kernel_enforcing = (security_getenforce() == 1);
+        bool is_enforcing = selinux_is_enforcing();
+        if (kernel_enforcing != is_enforcing) {
+            if (security_setenforce(is_enforcing)) {
+                PLOG(ERROR) << "security_setenforce(%s) failed" << (is_enforcing ? "true" : "false");
+                security_failure();
+            }
+        }
 
         if (!write_file("/sys/fs/selinux/checkreqprot", "0")) {
             security_failure();
@@ -894,32 +879,30 @@ static void selinux_initialize(bool in_kernel_domain) {
 // This must happen before /dev is populated by ueventd.
 static void selinux_restore_context() {
     LOG(INFO) << "Running restorecon...";
-    if (is_selinux_enabled()) {
-       restorecon("/dev");
-       restorecon("/dev/kmsg");
-       restorecon("/dev/socket");
-       restorecon("/dev/random");
-       restorecon("/dev/urandom");
-       restorecon("/dev/__properties__");
-
-       restorecon("/file_contexts.bin");
-       restorecon("/plat_file_contexts");
-       restorecon("/nonplat_file_contexts");
-       restorecon("/plat_property_contexts");
-       restorecon("/nonplat_property_contexts");
-       restorecon("/plat_seapp_contexts");
-       restorecon("/nonplat_seapp_contexts");
-       restorecon("/plat_service_contexts");
-       restorecon("/nonplat_service_contexts");
-       restorecon("/plat_hwservice_contexts");
-       restorecon("/nonplat_hwservice_contexts");
-       restorecon("/sepolicy");
-       restorecon("/vndservice_contexts");
-
-       restorecon("/sys", SELINUX_ANDROID_RESTORECON_RECURSE);
-       restorecon("/dev/block", SELINUX_ANDROID_RESTORECON_RECURSE);
-       restorecon("/dev/device-mapper");
-    }
+    restorecon("/dev");
+    restorecon("/dev/kmsg");
+    restorecon("/dev/socket");
+    restorecon("/dev/random");
+    restorecon("/dev/urandom");
+    restorecon("/dev/__properties__");
+
+    restorecon("/file_contexts.bin");
+    restorecon("/plat_file_contexts");
+    restorecon("/nonplat_file_contexts");
+    restorecon("/plat_property_contexts");
+    restorecon("/nonplat_property_contexts");
+    restorecon("/plat_seapp_contexts");
+    restorecon("/nonplat_seapp_contexts");
+    restorecon("/plat_service_contexts");
+    restorecon("/nonplat_service_contexts");
+    restorecon("/plat_hwservice_contexts");
+    restorecon("/nonplat_hwservice_contexts");
+    restorecon("/sepolicy");
+    restorecon("/vndservice_contexts");
+
+    restorecon("/sys", SELINUX_ANDROID_RESTORECON_RECURSE);
+    restorecon("/dev/block", SELINUX_ANDROID_RESTORECON_RECURSE);
+    restorecon("/dev/device-mapper");
 }
 
 // Set the UDC controller for the ConfigFS USB Gadgets.
@@ -995,14 +978,13 @@ int main(int argc, char** argv) {
         mkdir("/dev/socket", 0755);
         mount("devpts", "/dev/pts", "devpts", 0, NULL);
         #define MAKE_STR(x) __STRING(x)
-        mount("proc", "/proc", "proc", 0, "gid=" MAKE_STR(AID_READPROC));
+        mount("proc", "/proc", "proc", 0, "hidepid=2,gid=" MAKE_STR(AID_READPROC));
         // Don't expose the raw commandline to unprivileged processes.
         chmod("/proc/cmdline", 0440);
         gid_t groups[] = { AID_READPROC };
         setgroups(arraysize(groups), groups);
         mount("sysfs", "/sys", "sysfs", 0, NULL);
-        if (is_selinux_enabled())
-           mount("selinuxfs", "/sys/fs/selinux", "selinuxfs", 0, NULL);
+        mount("selinuxfs", "/sys/fs/selinux", "selinuxfs", 0, NULL);
         mknod("/dev/kmsg", S_IFCHR | 0600, makedev(1, 11));
         mknod("/dev/random", S_IFCHR | 0666, makedev(1, 8));
         mknod("/dev/urandom", S_IFCHR | 0666, makedev(1, 9));
@@ -1027,11 +1009,9 @@ int main(int argc, char** argv) {
 
         // We're in the kernel domain, so re-exec init to transition to the init domain now
         // that the SELinux policy has been loaded.
-        if (is_selinux_enabled()) {
-           if (restorecon("/init") == -1) {
-              PLOG(ERROR) << "restorecon failed";
-              security_failure();
-           }
+        if (restorecon("/init") == -1) {
+            PLOG(ERROR) << "restorecon failed";
+            security_failure();
         }
         LOG(INFO) << "restorecon (/init)";
 
diff --git a/init/log.cpp b/init/log.cpp
index a99ed50..0615730 100644
--- a/init/log.cpp
+++ b/init/log.cpp
@@ -25,20 +25,17 @@
 
 void InitKernelLogging(char* argv[]) {
     // Make stdin/stdout/stderr all point to /dev/null.
-    if (is_selinux_enabled()) {
-       int fd = open("/sys/fs/selinux/null", O_RDWR);
-       if (fd == -1) {
-          int saved_errno = errno;
-          android::base::InitLogging(argv, &android::base::KernelLogger);
-          errno = saved_errno;
-          PLOG(FATAL) << "Couldn't open /sys/fs/selinux/null";
-       }
-
-       dup2(fd, 0);
-       dup2(fd, 1);
-       dup2(fd, 2);
-       if (fd > 2) close(fd);
+    int fd = open("/sys/fs/selinux/null", O_RDWR);
+    if (fd == -1) {
+        int saved_errno = errno;
+        android::base::InitLogging(argv, &android::base::KernelLogger);
+        errno = saved_errno;
+        PLOG(FATAL) << "Couldn't open /sys/fs/selinux/null";
     }
+    dup2(fd, 0);
+    dup2(fd, 1);
+    dup2(fd, 2);
+    if (fd > 2) close(fd);
 
     android::base::InitLogging(argv, &android::base::KernelLogger);
 }
diff --git a/init/property_service.cpp b/init/property_service.cpp
index 2a1123e..0b055f2 100644
--- a/init/property_service.cpp
+++ b/init/property_service.cpp
@@ -74,8 +74,6 @@ void property_init() {
 }
 
 static bool check_mac_perms(const std::string& name, char* sctx, struct ucred* cr) {
-    if (is_selinux_enabled() <= 0)
-        return 1;
 
     if (!sctx) {
       return false;
@@ -180,12 +178,10 @@ uint32_t property_set(const std::string& name, const std::string& value) {
         return PROP_ERROR_INVALID_VALUE;
     }
 
-    if (is_selinux_enabled()) {
-       if (name == "selinux.restorecon_recursive" && valuelen > 0) {
-          if (restorecon(value.c_str(), SELINUX_ANDROID_RESTORECON_RECURSE) != 0) {
-             LOG(ERROR) << "Failed to restorecon_recursive " << value;
-          }
-       }
+    if (name == "selinux.restorecon_recursive" && valuelen > 0) {
+        if (restorecon(value.c_str(), SELINUX_ANDROID_RESTORECON_RECURSE) != 0) {
+            LOG(ERROR) << "Failed to restorecon_recursive " << value;
+        }
     }
 
     prop_info* pi = (prop_info*) __system_property_find(name.c_str());
diff --git a/init/service.cpp b/init/service.cpp
index b0df603..0b3942f 100644
--- a/init/service.cpp
+++ b/init/service.cpp
@@ -59,38 +59,35 @@ static std::string ComputeContextFromExecutable(std::string& service_name,
     char* raw_con = nullptr;
     char* raw_filecon = nullptr;
 
-    if (is_selinux_enabled() > 0) {
-        if (getcon(&raw_con) == -1) {
-            LOG(ERROR) << "could not get context while starting '" << service_name << "'";
-            return "";
-        }
-        std::unique_ptr<char> mycon(raw_con);
+    if (getcon(&raw_con) == -1) {
+        LOG(ERROR) << "could not get context while starting '" << service_name << "'";
+        return "";
+    }
+    std::unique_ptr<char> mycon(raw_con);
 
-        if (getfilecon(service_path.c_str(), &raw_filecon) == -1) {
-            LOG(ERROR) << "could not get file context while starting '" << service_name << "'";
-            return "";
-        }
-        std::unique_ptr<char> filecon(raw_filecon);
+    if (getfilecon(service_path.c_str(), &raw_filecon) == -1) {
+        LOG(ERROR) << "could not get file context while starting '" << service_name << "'";
+        return "";
+    }
+    std::unique_ptr<char> filecon(raw_filecon);
 
-        char* new_con = nullptr;
-        int rc = security_compute_create(mycon.get(), filecon.get(),
+    char* new_con = nullptr;
+    int rc = security_compute_create(mycon.get(), filecon.get(),
                                      string_to_security_class("process"), &new_con);
-        if (rc == 0) {
-           computed_context = new_con;
-            free(new_con);
-        }
-        if (rc == 0 && computed_context == mycon.get()) {
-            LOG(ERROR) << "service " << service_name << " does not have a SELinux domain defined";
-            if (selinux_status_getenforce() > 0) {
-                return "";
-            }
-        }
-        if (rc < 0) {
-            LOG(ERROR) << "could not get context while starting '" << service_name << "'";
+    if (rc == 0) {
+        computed_context = new_con;
+        free(new_con);
+    }
+    if (rc == 0 && computed_context == mycon.get()) {
+        LOG(ERROR) << "service " << service_name << " does not have a SELinux domain defined";
+        if (selinux_status_getenforce() > 0) {
             return "";
         }
     }
-
+    if (rc < 0) {
+        LOG(ERROR) << "could not get context while starting '" << service_name << "'";
+        return "";
+    }
     return computed_context;
 }
 
@@ -260,14 +257,11 @@ void Service::SetProcessAttributes() {
             PLOG(FATAL) << "setuid failed for " << name_;
         }
     }
-    if (is_selinux_enabled() > 0) {
-       if (!seclabel_.empty()) {
-          if (setexeccon(seclabel_.c_str()) < 0) {
-             PLOG(FATAL) << "cannot setexeccon('" << seclabel_ << "') for " << name_;
-          }
-       }
+    if (!seclabel_.empty()) {
+        if (setexeccon(seclabel_.c_str()) < 0) {
+            PLOG(FATAL) << "cannot setexeccon('" << seclabel_ << "') for " << name_;
+        }
     }
-
     if (priority_ != 0) {
         if (setpriority(PRIO_PROCESS, 0, priority_) != 0) {
             PLOG(FATAL) << "setpriority failed for " << name_;
@@ -646,15 +640,13 @@ bool Service::Start() {
     }
 
     std::string scon;
-    if (is_selinux_enabled() > 0) {
-        if (!seclabel_.empty()) {
-            scon = seclabel_;
-        } else {
-            LOG(INFO) << "computing context for service '" << name_ << "'";
-            scon = ComputeContextFromExecutable(name_, args_[0]);
-            if (scon == "") {
-                return false;
-            }
+    if (!seclabel_.empty()) {
+        scon = seclabel_;
+    } else {
+        LOG(INFO) << "computing context for service '" << name_ << "'";
+        scon = ComputeContextFromExecutable(name_, args_[0]);
+        if (scon == "") {
+            return false;
         }
     }
 
diff --git a/init/util.cpp b/init/util.cpp
index a939948..be40000 100644
--- a/init/util.cpp
+++ b/init/util.cpp
@@ -96,7 +96,10 @@ int create_socket(const char *name, int type, mode_t perm, uid_t uid,
                   gid_t gid, const char *socketcon)
 {
     if (socketcon) {
-        setsockcreatecon(socketcon);
+        if (setsockcreatecon(socketcon) == -1) {
+            PLOG(ERROR) << "setsockcreatecon(\"" << socketcon << "\") failed";
+            return -1;
+        }
     }
 
     android::base::unique_fd fd(socket(PF_UNIX, type, 0));
@@ -410,8 +413,8 @@ bool expand_props(const std::string& src, std::string* dst) {
 }
 
 void panic() {
-    LOG(ERROR) << "panic: rebooting to recovery";
-    DoReboot(ANDROID_RB_RESTART2, "reboot", "recovery", false);
+    LOG(ERROR) << "panic: rebooting to bootloader";
+    DoReboot(ANDROID_RB_RESTART2, "reboot", "bootloader", false);
 }
 
 void panic1(char *reason) {
-- 
2.7.4

